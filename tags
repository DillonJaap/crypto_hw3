!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/a3c87ab5/
add_round_key	main.c	/^void add_round_key(matrix* block, matrix* key)$/;"	f	typeref:typename:void
cols	matrix.h	/^	int16_t  cols;$/;"	m	struct:matrix	typeref:typename:int16_t
free_matrix	matrix.c	/^void free_matrix(matrix* m)$/;"	f	typeref:typename:void
get_col	matrix.c	/^void get_col(matrix* dest, matrix* src, uint8_t col)$/;"	f	typeref:typename:void
init_matrix	matrix.c	/^matrix* init_matrix(uint8_t rows, uint8_t cols, uint8_t* data)$/;"	f	typeref:typename:matrix *
init_sbox	main.c	/^matrix* init_sbox()$/;"	f	typeref:typename:matrix *
main	main.c	/^int main(int argc, char** argv)$/;"	f	typeref:typename:int
matrix	matrix.h	/^typedef struct matrix$/;"	s
matrix	matrix.h	/^} matrix;$/;"	t	typeref:struct:matrix
mix_cols	main.c	/^void mix_cols(matrix* block, matrix* mixcol)$/;"	f	typeref:typename:void
mult	matrix.c	/^uint8_t mult(uint8_t a, uint8_t b)$/;"	f	typeref:typename:uint8_t
mult_matrix	matrix.c	/^void mult_matrix(matrix* dest, matrix* L, matrix* R)$/;"	f	typeref:typename:void
print_matrix	matrix.c	/^void print_matrix(matrix* m)$/;"	f	typeref:typename:void
rotate_col	matrix.c	/^void rotate_col(matrix* m, uint8_t col, uint8_t n)$/;"	f	typeref:typename:void
rotate_row	matrix.c	/^void rotate_row(matrix* m, uint8_t row, uint8_t n)$/;"	f	typeref:typename:void
rows	matrix.h	/^	int16_t  rows;$/;"	m	struct:matrix	typeref:typename:int16_t
set_col	matrix.c	/^void set_col(matrix* dest, matrix* src, uint8_t col)$/;"	f	typeref:typename:void
set_matrix	matrix.c	/^void set_matrix(matrix* m, uint8_t* data)$/;"	f	typeref:typename:void
shift_rows	main.c	/^void shift_rows(matrix* block)$/;"	f	typeref:typename:void
sub_bytes	main.c	/^void sub_bytes(matrix* block, matrix* sbox)$/;"	f	typeref:typename:void
sum_Lrow_Rcol	matrix.c	/^int sum_Lrow_Rcol(matrix* L, matrix* R, uint8_t Lrow, uint8_t Rcol)$/;"	f	typeref:typename:int
t	matrix.h	/^	int8_t** t;$/;"	m	struct:matrix	typeref:typename:int8_t **
